Chapter 02 요구사항 확인 

#1 요구분석 기법

(1) 요구분석의 개념 
    => 사용자의 요구 추출, 목표 설정, 어떤 방식으로 해결할지 결정하는 단계
    => 사용자의 요구사항 중 모호한 부분 걸러내기 위한 과정

(2) 요구분석의 특징
    * 개발의 첫 단계로 사용자의 요구에 대한 이해하는 단계
    * 문서화를 통해 유지보수 활용
    * 구체적인 명세를 위해 논리적인 소단위 명세서 활용
    * 비용 많이 드는 단계가 아니고, 도메인 분석은 요구에 대한 정보를 수집, 분석하여 이를 토대로 모델링을 한다.

(3) 요구사항 분석 단계 절차
    -1. 요구사항 분류 (기능, 비기능 확인 & 소프트웨어에 미치는 영향, 생명주기 동안 변겨이 발생하는 지 파악)
    -2. 개념 모델링 생성 및 분석 (현실 세계의 상황을 모델링 하는것, 다양한 모델 및 다양한 다이어그램 사용)
    -3. 요구사항 할당 (요구사항을 만족시키기 위한 아키텍처 구성요소 식별, 다른 요소와 어떻게 상호 작용하는지 분석)
    -4. 요구사항 협상 (두 명의 이해관계가가 상충되면 우선순위 부여 후 합의)
    -5. 정형 분석 (구문과 의미를 갖는 정형화된 언어를 사용하여 수학적 기호로 표현, 요구사항 분석의 마지막 단계)

(4) 요구사항 분석 기술
    => 청취, 인터뷰와 질문, 분석, 중재, 관찰, 작성, 조직, 모델 작성 

(5) 요구사항 분석에 사용하는 기능 모델링 기법 

    * 1. 데이터 흐름도(DFD: Data Flow Diagram)
        개념: 데이터가 프로세스에 따라 흐르면서 변환되는 모습을 나타낸 그림으로 가장 보편적 사용 되며, 자료 흐름 그래프, 버블 차트라고도 한다.
        특징 :  구조적 분석 기법에 이용된다.
                데이터의 흐름에 중심을 두는 분석용 도구이다.
                제어의 흐름은 중요하지 ㅇ낳다.
                시간 흐름을 명확히 표현할 수 없다.
        구성요소 : 처리기(Process), 데이터 흐름(Data Flow), 데이터 저장소(Data Store), 단말(Terminator)
            처리기 : 입력된 데이터를 원하는 형태로 변환하여 출력하기 위한 요소 : 원
            데이터흐름 : DFD의 구성요소들 간 주고받는 데이터 흐름을 나타내는 요소 : 화살표
            데이터저장소 : 평행선 안에는 데이터 저장소의 이름을 넣음 : 평행선
            단말 : 프로세스 처리 과정에서 데이터가 발생하는 시작과 종료를 나타내고, 외부 엔티티 이름을 넣음 : 사각형 

    * 2. 자료사전(DD: Data Dictionary)        
        개념: 자료 요소, 요소들의 집합, 흐름, 저장소의 의미와 관계, 관계 값, 범위, 단위들을 구체적으로 명시하는 사전
            파일 혹은  db에 있는 자료에 대한 자료 또는 각 자료 항목에 주어진 이름과 길이 그리고 서술과 같은 데이터를 포함하는 참조를 위한 작업이다. 
        목적: 특정한 자료 용어의 의미, 용어의 정의를 조정하고 취합하여 문서로 명확히 하는 목적이 있다.
            자료 흐름도에 나타나는 어떤 자료의 흐름도 자료 사전에 정의되어 있어야 한다.

        기호    
            = 정의
            + 자료의 연결
            () 자료 생략 가능함
            {} 반복
            [] 선택
            ** 주석 

        작성원칙 : 자료의 의미 기술, 자료 구성항목의 기술, 동의어 규정 준수, 자료 정의의 중복 제거

(6) 요구사항 분석이 어려운 이유 
    개발자와 사용자 간의 지식과 표현의 차이, 모호한 사용자의 요구사항, 계속 변하는 요구사항, 예외가 많아 열거와 구조화가 어려움 


#2 UML

(1) UML(Unified Modeling Language)의 개념
    객체 지향 소프트웨어 개발 과정에서 산출물을 명세화, 시각화, 문서화 할 때 사용되는 모델링 기술과 방법론을 통합해서 만든 표준화된 범용 모델링 언어

(2) 특징 : 가구명문
    1. 가시화 언어 : 개념 모델 작성 시 오류가 적고 의사소통이 용이
    2. 구축 언어 : 다양한 프로그래밍 언어로 실행 시스템의 예측 가능
    3. 명세화 언어 : 정확한 모델 제시, 완전한 모델 작성 가능
    4. 문서화 언어 : 시스템에 대한 평가 및 의사소통의 문서 

(3) 구성요소(사관다)
    사물 : 추상적인 개념으로 주제를 나타내는 요소, 단어 관점에서 명사 또는 동사를 의미
    관계 : 사물의 의미를 확장하고 명확히 하는 요소, 사무과 사물을 연결하여 관계를 표현하는 요소, 형용사 또는 부사를 의미
    다이어그램 : 사물과 관계를 모아 그림으로 표현한 형태, 형식과 목적에 따라 9가지로 정의 

(4) UML 다이어그램 
    - 개념 : 사물과 관계를 모아 그림으로 표현한 형태 
    - 구분 : 구조적(정적) 다이아그램, 행위적(동적) 다이어그램으로 구분되며 컴포넌트 & 배치 다이어그램은 구현 단계에서 사용되는 다이어그램이다. 

    *구조적 다이어그램/정적 다이어그램 (클객 컴배 복패)
        - 클래스 : 시스템 내 클래스의 정적 구조를 표현, 속성과 동적으로 구성
        - 객체 : 클래스에 속한 사물(객체)들, 인스턴스를 특정 시점의 객체와 객체사이의 관계로 표현
        - 컴포넌트 : 코드 컴포넌트 기반의 물리적 구조 표현
        - 배치 : 컴포넌트 사이의 종석성을 표현하며 결과물, 프로세스, 컴포넌트 등 물리적 요소들의 위치를 표현 
        - 복합체 구조 : 클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조를 표현
        - 패키지 : 유스케이스나 클래스 드으이 모델 요소들을 그룹화한 패키지들의 관계를 표현 

    * 행위적 다이어그램 / 동적 다이어그램 (유시커 상활타)
         - 유스케이스 : 사용자의 관점에서 시스템의 활동을 표현, 기능적 요구 정의에 활용
         - 시퀀스 : 객체 간 상호 작용을 메세지 흐름으로 표현, 겍체 사이 메세지를 보내는 시간을 표현
         - 커뮤니케이션 : 시퀀스 다이어그램과 같이 동작에 참여하는 객체들이 주고 받는 메세지를 표현하는데 객체 간의 연관까지 표현 
         - 상태 : 하나의 객체가 자신이 속한 클래스의 상태 변화 또는 상호 작용에 따라 변화하는 상태 표현 
         - 활동 : 어떤 기능을 수행하는지 객체의 처리 로직이나 처리 흐름으로 순서대로 표현, 활동의 순서대로 흐름을 표현 
         - 타이밍 : 객체 상태 변화와 시간 제약을 명시적으로 표현 

(5) UML 상세
    1. 클래스 다이어그램 
        - 개념 : 객체 지향 모델링 시 클래스의 속성 및 연산과 클래스 간 정적인 관계를 표현한 다이어그램 
                클래스와 클래스 즉 클래스 속성 사이의 관계를 의미한다.
        - 구성요소 : 클래스 이름, 속성, 연산, 접근 제어자(- private, + public, 샵 protected, ~ default)

    2. 유스케이스 다이어그램 
        - 개념 : 시스템이 제공하고 있는 기능 및 그와 관련된 외부 요소를 사용자의 관점에서 표현하는 다이어그램 
        - 구성요소 : 유스케이스(시스템이 제공해야하는 서비스), 액터(사용자가 시스템에 대해 수행하는 역할), 시스템(전체 시스템의 영역을 표현)
        - 구성요소간의 관계
             * 연관관계(실선) Association : 유스케이스와 액터 간의 상호작용이 있음을 표현
             * 포함관계(점선, <<include>>) Include : 하나의 유스케이스가 다른 유스케이스의 실행을 전제로 할 때 형성되는 관계
             * 확장관계('') Extend : 특정 조건에 따라 확장 기능 유스케이스를 수행하는 관계
             * 일반화관계(실선, 화살표) Generaization : 유사한 유스케이스 또는 액터를 모아 추상화한 유스케이스 또는 액터와 연결시켜 그룹을 만들어 이해도를 높이기 위한 관계 

    3. 시퀀스 다이어그램
        - 개념 : 객체 간 상호 작용을 메시지 흐름으로 표현한 다이어그램 
        - 구성요소 : 객체, 생명선, 실행 ,메세지, 회귀

    4. 상태 다이어그램
        - 개념 : 하나의 객체가 자신이 속한 클래스의 사앹 변화 혹은 상호 작용에 따라 상태가 어떻게 변화하는지 표현하는 다이어그램 
                어떤 이벤트에 의해 객체 자신이 속한 클래스의 상태 변화나 객체 간 상호 작용하는 과정에서의 상태 변화를 표현한다. 
        - 구성요소 : 상태, 시작 상태, 종료 상태, 전이, 이벤트, 전이 조건 


(6) UML의 관계 (연의 일시 포집)
    * 연관 관계
    * 의존 관계
    * 일반화 관계
    * 실체화 관계
    * 포함 관계
    * 집합 관계

(7) UML 확장 모델의 스테레오 타입
     - UML의 기본적 요소 이외의 새로운 요소를 만들어 내기 위한 확장 메커니즘
     - 형태는 기존의 UML 요소를 그대로 사용하지만 내부 의미는 다른 목적으로 사용하도록 확장 
     - '<<>>' 길러멧 기호를 사용하여 표현 
     - include, extend, interface, entity, boundary, control

 #3. 애자일(Agile)
 =>소프트웨어 개발론의 하나로서 개발과 함께 즉시 피드백을 받아 유동적으로 개발하는 방법
 등장배경: 기존 개발방법론 한계 극복 위해 

 특징 : 기능 중심, 개인과 소통 중시, 짧은 계회, 유연 & 신속 대응, 잘 실행되는 가에 가치, 고객과 피드백 중요

    애자일 선언문 : 
        공정과 도구보다 개인과 상호 작용
        계획을 따르기보다 변화에 대응하기
        포괄적인 문서보다 동작하는 소프트웨어계약 협상보다 고객과의 협력    
    
    애자일 방법론 유형 :
    XP, Lean, SCRUM

    XP(eXtrem Programming) 의사소통, 개선, 즈각적 피드백, 1~3주 개발주기, 5가지 가치, 12개의 실천 항목 
    스크럼(SCRUM) 매일 정해진 시간, 장소에서 짧은 시간의 개발을 하는 팀을 위한 프로젝트 관리 중심 방법론 
    린 : 도요타의 린 시스템 품질 기법을 소프트웨어 개발 프로세스에 적용해서 낭비 요소를 제거하여 향상시킨 방법론, JIT, 칸반보드 사용 
    크리스탈
    ASD : 개발을 혼란 자체로 규정 
    FDD : 개발을 서비스 단위가 아니라 신규 기능 단위로 
