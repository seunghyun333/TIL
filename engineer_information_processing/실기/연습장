트랜잭션 특성 : 일관성, 지속성, 원자성, 격리성
Redo : 장애 발생 전 db로 복구하는 기법으로 디스크에 저장된 로그를 분석하여 트랜잭션의 시작과 완료에 대한 기록이 있는 트랜잭션들의 작업을 재실행하는 기법
Undo : 장애 시 디스크에 저정된 로그를 분석하여 트랜잭션의 시작은 있지만 완료 기록이 없는 트랜잭션들이 작업한 변경 내용을 모두 취소하는 기법 
로킹 : 같은 자원을 엑세스하는 다중 트랜잭션 환경에서 db의 일관성과 무결성을 유지하기 위해 트랜잭션의 순차적 진행을 보장하는 직렬화 기법 

SELECT DEPT FROM STUDENT;
SELECT DISTINCT DEPT FROM STUDENT;
SELECT COUNT(DISTINCT DEPT) FROM STUDENT WHERE DEPT='컴퓨터과'

SELECT 이름  FROM 학생 WHERE 학년 IN (3,4);

데이터베이스의 회복 기법 중 롤백시 REDO, UNDO가 모두 실행되는 트랜잭션 처리법으로 트랜잭션 수행 중 갱신 결과를 바로 DB에 반영하는 기법  : 즉각 갱신 회복 기법 

CREATE INDEX IDX_NAME ON STUDENT(NAME);

DELETE FROM 학생 WHERE 이름 = '민수';

도메인: 하나의 속성이 가질 수 있는 원자값들의 집합, 속성의 데이터 타입과 크기, 제약조건 등의 정보
스키마: 데이터베이스의 구조, 제약조건 등의 정보를 담고 있는 기본적인 구조 
테이블 : 데이터 저장 공간
뷰: 하나 이상의 물리 테이블에서 유도되는 가상의 테이블
인덱스 : 검색을 빠르게 하기 위한 데이터 구조 

ALTER TABLE 학생 ADD 주소 VARCHAR(20);

UPDATE 회원 SET 전화번호 = '010-4' WHERE 회원번호 = 'N4';

SELECT * FROM 학생 WHERE 이름 LIKE '이%' ORDER BY 이름 DESC;

 Al로 시작하고 세 번째 문자가 a가 아닌 'Al[^a]%';  
문자 m로 시작하는 이름을 반환합니다. [n-z]는 두 번째 문자가 n부터 z 사이여야 함을 지정,백분율 와일드카드 % 는 3자로 시작하는 문자를 허용하거나 허용하지 않습니  'm[n-z]%';
숫자 또는 일련의 특수 문자로 시작하는 문자열을 찾습니다.  '[0-9!@#$.,;_]%';
세번째 문자가 A 일때 _ _ A

SELECT NAME, SCORE FROM 성적 ORDER BY SCORE DESC;
SELECT COUNT(*) CNT FROM SOO CROSS JOIN JEBI WEHRE SOO.NAME LKIE JEBI.RULE;
CROSS JOIN : 전부 다 

GRANT :  DB 관리자가 사용자에게 DB에 대한 권한을 부여하는 명령어 

SELECT COUNT(COL2) FROM TB WHERE COL1 IN(2,3), COL2 IN (3,5); 

COUNT(컬럼명) : NULL 제외
COUNT(*) : NULL 포함 

외부스키마: 사용자나 개발자의 관점에서 , 사용자 뷰를 나타내며, 서브 스키마로 불림
개념스키마 : 데이터베이스의 전체적인 논리적 구조, 전체적인 뷰, 관계, 조건, 권한, 무결성, 보안에 대해 정의
내부스키마 : 물리적 저장 장치의 관점에서 , 실제로 저장될 레코드의 형식 정의하고 저장, 데이터 항목의 표현 방법, 내부 레크드의 물리적 순서등을 표현 

CASCADE 참조하는 테이블까지 연쇄적으로 제거 / RESTRICT 다른 테이블이 삭제할 테이블을 참조 중이면 제거하지 않는 옵션 

INSERT INTO 학생 VALUE (9830287, '한국산', 3, '경영학개론', '050-1234-1234);

UNION(중복X), UNION ALL(중복 O)

외부/개념/내부 스키마

CREATE INDEX 사번인덱스 ON 사번(사번);

CREATE TABLE 사람 (이름 VARCHAR(10), 성별 CHAR(1) CHECK (성별='M' OR 성별='F'));

ALTER TABLE 사원 ADD 전화번호 VARCHAR(11);

CREATE VIEW 사원뷰 AS
 SELECT 사번, 이름 FROM 사원
 WHERE 성별 = 'M';

SELECT DISTINCT 전공 FROM 학생;
SELECT 학번 FROM 학생 WHERE 이름 LIKE '이%';

SELECT 주소 FROM 학생 WHERE 주소 IS NOT NULL;

SELECT * FROM 교수 WHERE 전공 IN('컴퓨터공학', '전자공학');

SELECT 이름 FROM 고객 WHERE AGE BETWEEN 50 AND 59 , 성별 ='남';

SELECT 이름, 과목, 성적 FROM 성적 DESC;

SELECT A.책번호, A.책명, B.책번호, B.가격 
FROM 도서 A LEFT OUTER JOIN 도서가격 B ON A.책번호 = B.책번호;

INSERT INTO EMPLOYEE VALUES('홍길동', 24, 300);

DELETE FROM EMPLOYEE WHERE 급여 <= 300 ;

GRANT UPDATE ON 학생 TO 장길산; 

SELET 과목이름, MIN(점수) AS 최소점수, MAX(점수) AS 최대점수 FROM 성적 
GROUP BY 과목이름 HAVING AVG(점수) >= 90;

SELECT 학과, COUNT(학과) AS 학과별튜플수 
FORM 학생 
GROUP BY 학과 ;

SELECT 과목, MIN(점수) AS 최소점수, MAX(점수) AS 최대점수 
 FROM 성적
 GROUP BY 과목, HAVING AVG(점수) >= 90;

SELECT 부서명, AVG(급여)
FROM 급여
GROUP BY 부서;

SELECT 부서, SUM(급여) AS 급여
FROM 급여
GROUP BY 부서, 직책 

SELECT 이름
FROM 학생
GROUP BY 이름 HAVING AVG(성적) > 4.0;

트리거 : 데이터베이스 시스템에서 삽입,갱신,삭제 등의 이벤트가 발생할때마다 관련 작업이 자동으로 수행되는 절차형 sql 
프로시저 : 일련의 쿼리들을 마치 하나의 함수처럼 실행하기 위한 쿼리의 집합 
사용자 정의함수 : 일련의 sql 처리를 수행하고, 수행 결자과를 단일 값으로 반환할 수 있는 절차형 sql 
옵티마이저 : sql을 빠르고 효율적으로 수행할 최적의 처리경로를 생성해주는 dbms 내부의 핵심엔진

ALTER TABLE User ADD USER_ID VARCHAR2(15);
ALTER TABLE User MODIFY User_NAME VARCHAR2(10);
ALTER TABLE User RENAME COLUMN User_Password TO User_Pw;
ALTER TABLE User DROP COLUMN User_Name;

CREATE TABLE 사람 
( 이름 VARCHAR(10),
  생년월일 CHAR(8) NOT NULL);

CREATE VIEW 학생뷰 AS 
SELECT 학번, 이름 FROM 학생 WHERE 전공 ='전산';

CREATE INDEX 학번인덱스 ON 학생(학번);

CREATE TABLE 교수 
( 교번 VARCHAR(10) PRIMARY KEY,
  이름 VARCHAR(10),
  임용일 VARCHAR(*) NOT NULL ) ;

ALTER TABLE 성적 ADD 학점 VARCHAR($) NOT NULL; 

SELECT 학번, 이름 FROM 학생 WHERE 학과 ='전산과';

SELECT 부서, SUM(급여) AS 급여합계
FROM 급여 
GROUP BY 부서 
HAVING SUM(급여) >= 6000;

SELECT 이름, 과목, 학점
FROM 성적
ORDER BY 학점 DESC, 이름 ASC;
