(1) 재사용
- 함수/객체 재사용, 컴포넌트 재사용, 애플리케이션 재사용

(2) 공통 모듈
* 모듈 : 크게 독립된 하나의 소프트웨어 또는 하드웨어 단위를 지칭하는 용어, 모듈화를 통해 분리된 시스템의 기능들로 서브프로그램, 서브 루틴, 소프트웨어 내의 단위 프로그램, 작업 단위 등과 같은 의미로 사용
* 모듈 특징 : 독립성, 다양한 조합, 재사용, 영향 최소화
* 공통모듈의 개념 : 특정 기능을 처리할 수 있는 실행 코드, 자체적으로 컴파일 가능하고, 다른 프로그램에서 재사용 가능 
* 공통 모듈의 원칙 : 정확성, 명확성, 완전성, 일관성, 추적성

* 모듈화 개념 : 프로그램이 효율적으로 관리될 수 있도록 시스템을 분해하고 추상화함으로써 소프트웨어 제품의 성능을 향상시키거나 시스템의 수정 및 재사용, 유지관리를 쉽게하는 기법
루틴 / 메인루틴/ 서브루틴

* 모듈화 필요성 : 크기가 너무 작아 많아지면 통합 비용이 많이 발생하고(& 상호교류 증과로 과부하 현상), 크기가 너무 크면 모듈 당 개발 비용이 커짐. 
* 모듈화 측정지표 
            - 응집도: 모듈의 내부 요소들의 서로 관련되어 있는 정도, 모듈이 독립적인 기능으로 정의되어 있는 정도 
            - 결합도: 모듈 간에 상호 의존하는 정도, 두 모듈 사이의 연관 관계를 맺고 있는 정도 

* 응집도 : 모듈의 독립성을 나타내는 개념으로 연관 정도 
우연적 < 논리적 < 시간적 < 절차적 < 통신적 < 순차적 < 기능적 

* 결합도 : 모듈 내부가 아닌 외부의 모듈과의 연관도 또는 모듈 간의 상호 의존성을 나타내는 정도 , 관련성 측정 
내용 > 공통 > 외부 > 제어 > 스탬프 > 자료 결합도 

*팬인 : 어떤 모듈을 제어하는 모듈의 수 (자신을 기준으로 들어옴) 높게 설정 
*팬아웃 : 어떤 모듈에 의해 제어되는 모듈의 수 (자신 기준으로 나감) 낮게 설계해야 좋음 

(3) 설계 모델링 
1. 설계 모델링
필수 기능들의 구체적인 구현 방법을 명시하는 기법
* 원칙 : 변경이 쉽도록 구조화되어야하고, 특정 기능을 수행하는 데 필요한 자료만 사용하도록 규제, 모듈 단위로 분할 설계, 계층적 구조 
* 유형 : 구조 모델링(컴포넌트들의 유형:프로시저,데이터 구조, 모듈, 파일 구조) / 행위 모델링 (상호 작용하는 지 모델링 :데이터 흐름, 변환, 저장 등)

2.소프트웨어 설계 유형
상위 설계 : 자료 구조 설계, 아키텍처 설계, 인터페이스설계, 프로시저설계, 협약에 의한 설계
하위 설계 : 모듈 설계하는

3. 소프트웨어 설계 원리
    - 상향식 설계 : 하위부터 시작, 기존 컴포넌트들을 조합하여 시스템 개발, 인터페이스가 있어야 기능 추가 쉬움
    - 하향식 설계 : 상위부터 내려요기, 시스템 명세 명확할 때

4. 코드 설계
    * 개념 : 데이터 분류나 조합을 쉽게 하기 위하여 사물을 표현 
    * 기능 : 표준화, 분류, 식별, 배열, 간소화, 연상, 암호화, 오류 검출 
    * 종류 : 연상코드, 블록코드(공통성있는것들 블록으로), 순차코드, 표의순차코드(물리적인 수치 길이, 넓이, 용량등), 십진코드, 그룹분류식코드(대중소 분류)
    * 절차 : 코드화 항목 선정, 코드화 목적설정, 대상확인, 범위결정, 사용기간 설정, 특성분석, 방식 결정, 문서화
    * 종류 : 사본오류(한자리실수), 전위오류(연속두글자오류), 생략오류(한개생략), 첨가오류, 이중전위오류

5. HIPO
    => 시스템 분석 및 설계, 문서화할 때 사용되며, 하향식 소프트웨어 개발을 위한 문서화 도구
    => 체계적인 문서관리, 보기쉽고, 의존관계 동시 표현가능, 유지보수 용이, 인터페이스를 계층구조로 표현한것을 HIPO차트라고 함
    => 종류 : 가시적도표, 총체적도표, 세부적도표 // 가총세


(3) 소프트웨어 아키텍처
     - 여러가지 소프트웨어 구성요소와 그 구성요소가 가진 특성 중에서 외부에 드러나는 특성, 그리고 구성요소 간의 관계를 표현하는 시스템 구조 
     - 관점 조율 통해 시스템 최적화, 비기능적인 요소에 집중하지만 기능적 요소도 고려 

     * 4+1 뷰 (유논프구배)
     => 고객의 요구사항을 정리해 놓은 시나리오를 4개의 관점에서 바라보는 소프트웨어적인 접근 방법 
     => 1은 유스케이스 뷰, 4는 논리 뷰, 구현 뷰, 프로세스 뷰, 배포 뷰 

     * 소프트웨어 아키텍처 비용 평가 모델 (SACAA)
     - SAAM, ATAM, CBAM, ADR, ARID

     *소프트 웨어 아키텍처 패턴 
     - 외부에서 인식할 수 있는 특성이 담긴 소프트웨어의 골격이 되는 기본 구조 
     - 계층화 패턴, 클라이언트-서버 패턴, 파이프 필터 패턴, 브로커 패턴, 모델뷰컨트롤러 패턴, 마스터슬레이브 패턴 

     *소프트웨어 아키텍처 품질 속성 
        => 아키텍처 비용 평가를 위해서 필요한 사항으로 특정 품질에 대한 요구사항을 명세한 내역, 최적의 아키텍처를 선택하기 위한 핵심 요소(품질 속성)이다.
        - 시스템 품질 속성 (가변성 보사시)
        - 비지니스 품질
        - 아키텍처 속성 




