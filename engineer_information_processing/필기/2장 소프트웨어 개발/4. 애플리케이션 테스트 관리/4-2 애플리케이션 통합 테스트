(1) 결함 관리 도구
1. 개념 : 단계별 테스트 수행 후 발생한 결함의 재발 방지를 위해 유사 결함 발견 시 처리 시간 단축을 위해 결함을 추적하고 관리하는 도구
2. 프로세스 
    에러 발견 -> 에러 등록 -> 에러 분석 -> 결함 확정 -> 결함 할당 -> 결함 조치 -> 결함 조치 검토 및 승인 
4. 결함의 식별 
    1. 결함의 개념 : 
        개발자 오류로 인해 만들어지는 문서 또는 코딩 상의 결점으로 소프트웨어가 개발자가 설계한 것과 다르게 동작하거나 다른 결과가 발생하는 현상 
        곃마을 제거하지 않으면 소프트웨어 ㅈ페무이 실패하거나 문제가 발생한다.
        오류 / 결점  버그 / 고장,문제 
    2. 결함 심각도별 분류 
        치명적 결함 / 주요 결함 / 보통 결함  / 경미한 결험 / 단순 결함 
    3. 결함 우선 순위 
        결정적 > 높음 > 보통 > 낮음 

    
(2) 테스트 자동화 도구
1. 개념 : 테스트 도구를 활용하여 반복적인 테스트 작업을 스크립트 형태로 구현함으로써 테스트 시간 단축과 인력 투입 비용을 최소하하며 쉽고 효율적인 테스트를 수행할 수 있는 방법
2. 장단점 
    장점 : 반복되는 테스트 데이트 잽입력 작업의 자동화, 일관성 검증에 유리, 객관적인 평가 기준 제공
    단점 : 도구 도입 후 도구 사용 방법에 대한 교육 및 학습이 필요 
3. 테스트 자동화 도구 유형 
    1. 정적 분석 도구 : 애플리케이션을 실행하지 않고 분석하는 방법 
    2. 테스트 시행 도구 : 테스트를 위해 작성된 스크립트를 실행하는 도구 
        데이터 주도 접근 방식 (테스트 데이터를 스프레드시트에 저장하고, 이 데이터를 읽고 실행)
        키워드 주도 접근 방식 (테스트를 수행할 동작을 나타내는 키워드와 테스트 데이터를 시프레드시트에 저장,)
    3. 성능 테스트 도구
    4. 테스트 통제 도구
    5. 테스트 장치
        개념 : 애플리케이션 컴포넌트 및 모듈을 테스트하는 환경의 일부분으로 테스트를 지원하기 위한 코드와 데이터 
        구성요소 : 테스트 드라이브, 테스트 스텁, 테스트 슈트, 테스트 케이스, 테스트 시나리오, 테스트 스크립트, 목 오브젝트 
    6. 테스트 단계별 테스트 자동화 도구 : 테스트 단게에 따라 자동화를 지원하는 테스트 도구가 있다.
        테스트 계획 - 요구사항 관리 
        테스트 분석/설계 - 테스트 케이스 생성
        테스트 수행 - 테스트 자동화, 정적 분석, 동적 분석, 성능 테스트, 모니터링
        테스트 관리 - 커버리지 츨정, 형상관리, 결함 추적/관리 
4. 테스트케이스 자동 생성도구를 통한 테스트 데이터 도출 방법 
    자료 흐름도, 기능 테스트, 입력 도메인 분석, 랜덤 테스트


(3) 통합 테스트 
1. 개념 : 애플리케이션 통합 테스트는 소프트웨어 각 모듈 간의 인터페이스 관련 오류 및 결함을 찾아내기위한 테스트, 
        단뒤 테스트가 끝난 모듈 또는 컴포넌트 단위의 프로그램이 설계 단계에서 제시한 애플리케이션과 동일함 구조와 성능으로 구현된 것인지를 확인하는 것이다. 
2. 통합 테스트 수행 방법의 분류
    1. 하향식 통합 테스트 : 메인 제어 모듈로부터 아래 방향으로 제어의 경로를 따라 이동하면서 하향식으로 통합하는 테스트
                        메인 제어 모듈에 통합되는 하위 모듈과 최하위 모듈은 '깊이-우선' 또는 '너비-우선' 방식으로 통합된다
        수행단계
            1단계 : 메인제어 모듈읜 작성된 프로그램을 사용하고, 아직 작성되지 않은 하위 모듈을 제어함 
            2단계 : 위에서 아래로 내려오기 때문에 검사 초기에 시스템의 구조가 파악되어야함 
            3단계 : 모듈 미 모든 하위 컴포넌트를 대신하여 더미 모듈은 스텁 개발 
            4단계 : 깊이 - 우선 방식 또는 너비 - 우선 방식에 따라 하위 모듈인 스텁이 한 번에 하나식 실제 모듈로 대체
            5단계 : 각 모듈 또는 컴포넌트를 통합하면서 수행
            6단계 : 테스트가 완료되면 스텁이 실제 모듈 또는 컴포넌트로 작성 
    
    2. 상향식 통합 테스트 : 최하위 레벨의 모듈에서 점진적으로 상위 모듈과 함께 테스트하는 기법 

        수행단계 
            1단계 : 하위 레벨의 모듈 또는 컴포넌트들이 하위 모듈의 기능을 수행하는 클러스터로 결함
            2단계 : 상위의 모듈에서 데이터의 입력과 출력을 확인하기 위한 더미 모듈인 드라이버 작성 
            3단계 : 각 통합된 클러스터 단위 테스트
            4단계 : 테스트가 완료되면 각 클러스터들은 프로그램의 위쪽으로 결합되며, 드라이버는 실제 모듈 또는 컴포넌트로 대체 

3. 통합 텟트 수행 방법 간 비교 
* 빅뱅 : 모든 모듈을 동시에 통합 후 테스트 수행, 드라이버&스텁없이 실제 모듈로 테스트, 단시간에 가능, 작은 시스템에 유리, 장우ㅐ위치파악이 어려움, 모든 모듈이 개발되어야가능
* 상향식 : 테스트 드라이버 필요, 장애위치 파악쉬움, 모든 모듈 개발 시간 낭비 필요 없음, 중요 모듈들이 마지막 테스트 가능성 높음, 이른 프로토타입 어려움 
* 하향식 : 테스트 스텁 필요, 장애위치 파악쉬어무, 이른 프로토탕비 가능, 중요 모듈의 선 테스트 가능, 많은 스텁이 가능, 하위 모듈들의 불충분한 테스트 수행 