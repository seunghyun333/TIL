(1) 파티셔닝
1. 개념 : 파티셔닝은 대용량의 테이블을 파티션이라는 보다 작은 논리적인 단위로 나눔으로써 성능 저하 방지 및 관리를 상대적으로 보다 용이하게 하고자 하는 기법 
2. 특징 : 물리적 파티셔닝으로 인해 전체 데이터 훼손 가능성이 줄어들고 데이터 가용성 향상
        데이터베이스를 작은 단위로 관리하여 편리
        부하를 각각 파티션들로 분산시켜 성능 향상
        병령 데이터베이스 환경 중 수평분할에서 활용되는 분할 기법
3. 파티셔닝 유형
    ㄱ. 범위 분할 : 분할 키값이 범위 내에 있는지 여부로 구분하는 기법
    ㄴ. 해시 분활 : 해시 함수의 값에 따라 파티션에 포함할지 여부를 결정
    ㄷ. 목록 분할 : 값 목록에 파티션을 할당하고 분할 키 값을 그 목록에 비추어 선택하는 기법 
    ㄹ. 조합 분할 : 범위 분할, 해시 분할, 목록 분할 중 2개 이상의 파티셔닝을 결합하는 기법 
    ㅁ. 라운드 로빈  : 회전하면서 새로운 행을 파티션에 할당하는 기법, 파티션에 행의 고른 분포를 원할 때 사용, 분할 컬럼을 명시할 필요가 없음, 테이블은 기본 키가 반드시 필요하진 않음

(2) 클러스터링
1. 개념 : 지정된 컬럼 값의 순서대로 데이터 행을 저장하는 방법
        하나 또는 그 이상의 테이블을 같은 클러스터 내 저장이 가능하다.
        액세스 효율 향상을 위한물리적 저장 방법으로, 검색 효율은 높여주나 입력, 수정, 삭제 시 부하가 증가할 수 있다. 
        분포도가 넓을 수록 오히려 유리하고, 분포도가 넓은 테이블의 클러스터링은 저장 공간의 절약이 가능하다.(분포도가 넓다 = 분포도가 안 좋다)
2. 유형
    단일 클러스터링 : 클러스터에 하나의 테이블만 생성
                같은 클러스터 컬럼 값을 가진 로우는 같은 장소에 저장되므로 넓은 범위의 데이터를 동시에 엑세스할 때 효과적 
    다중 클러스터링 : 단일 클러스터에 두 개 이상의 테이블을 함께ㅓ 저장
                같은 클러스터 키 컬럼을 가진 각 테입르의 로우는 정해진 장소에 같이 저장되므로 테이블 조인 속도를 향상
                클러스터 컬럼이 수정되면 데이터 값이 수정되므로 추가적인 클러스터 체인 블록이 발생하여 호율 감소 
3. 클러스터링 설계시 고려사항
- 대량의 범위를 자주 액세스하는 경우
- 인덱스를 사용한 처리 부담이 되는 넓은 분포도
- 여러 개의 텡비ㅡㄹ이 자주 조인을 일으킬 때
- 반복 커럼이 정규화에 의해 어쩔 수 없이 분할된 경우
- UNION, DISTINCT, ORDER  BY, GROUP BY가 빈번한 컬럼이면 고ㅓ려
- 수정이 자주 발생하지 않는 컬럼

(3) 데이터베이스 백업
1. 개념 : 데이터가 손상되거나 손실될 경우 피해를 최소화하기 위해 현재의 데이터를 저장하는 기법 
2. 종류 : 전체 백업, 차등백업(마지막 백업 이후 변경된 모든 데이터 백업), 증분 백업(정해진 시간 그 이후에 변경된 파일만), 트랜잭션 로드백업(로그파일에 기록된 로그를 백업, 느림)