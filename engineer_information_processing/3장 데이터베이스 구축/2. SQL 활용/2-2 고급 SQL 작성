(1) 뷰
1. 개념 : 논리 테이블로서 사용자에게(생성 관점 아닌 사용 관점에서) 테이블과 동일하다.
        뷰는 하나의 물리 테이블로부터 생성 가능하며, 다수의 테이블 또는 다른 뷰를 이용해 만들 수 있다.
        뷰와 같은 결과를 만들기 위해 조인 기능을 활용할 수 있으나 뷰가 만들어져 있다면 사용자는 조인 없이 하나의 테이블을 대상으로 하는 단순한 질의어를 사용할 수 있다.
2. 장점 : 논리적 독립성 제공, 데이터 조작 연산 산소화, 보안기능(접근제어)제공
   단점 : 뷰 자체 인덱스 불가, 뷰 변경 불가, 데이터 변경 제약 존재 
3. 뷰 명령어
    1. 뷰 생성 : CREAVE VIEW [뷰 이름 컬럼 목록] AS [데이터 조회 쿼리];
        CREATE VIEW VW_A AS
        SELECT *
        FROM A;

        CREATE VEIW VW_B AS
        SELECT 컬럼1, 컬럼2
        FROM A;

        CREATE VIEW VW_C AS
        SELECT *
        FROM A, B
        WHERE A.컬럼1 = B.컬럼1;
    2. 뷰 삭제/ 변경 : 사제와 재생성을 통해 뷰에 대한 정의 변경이 가능하다. 
        DROP VIEW 테이블명[CASCASDE | RESTRICT];
        CASCADE: 참조하는 테이블까지 연쇄적으로 제거하는 옵션
        RESTRICT: 다른 테이블이 삭제할 테이블을 참조 중이면 제거하지 않는 옵션 

(2) 인덱스
1. 개념 : 데이터를 빠르게 찾을 수 있는 수단으로서 테이블에 대한 조회 속도를 높여 주는 자료 구조이다
        테이블의 특정 레코드 위치를 알려 주는 용도로 사용
        기본키(primary key) 컬럼은 자동으로 인덱스가 생성된다. 
        연월일이나 이름을 기준으로 하는 인덱스는 자동으로 생성되지 않는다.
2. 인덱스 조작
    1. 인덱스 생성 
        CREATE [UNIQUE] INDEX 인덱스명 ON 테이블명(컬럼명);
        [UNIQUE] : 인덱스 걸린 컬럼에 중복 값을 혀용하지 않음(생략가능)
    2. 삭제 : DROP INDEX 인덱스명;
    3. 인덱스 변경 
        ALTER [UNIQUE] INDEX 인덱스명 ON 테이블명(컬럼명);

(3) 집합 연산자 
1. 개념 : 두 개 이상의 테이블에서 여러 개의 질의의 결과를 연결하여 하나로 결합하는 연산자
        집합 연산자는 여러 질의 결과를 연결하여 하나로 결합하는 방식을 사용한다. 
2. 집합 연산자 유형
    UNION : 중복 행이 제거된 쿼리 결과 집합
    UNION ALL : 중복 행이 제거되지 않은 쿼리 결과 집합
    INTERSECT : 두 쿼리 결과에 공통적으로 존재하는 집합
    MINUS : 첫 쿼리에 있고 두 번째 쿼리에는 없는 집합 

    1. UNION : 합집합, 두 개의 데이터 집합의 결과에 대해 중복을 제거하고 모두 포함한 결과를 반환한다. 
    2. UNION ALL : UNION과 유사하나 중복된 항목을 포함하여 결과를 반환한다. 
    3. INTERSECT : 합집합이 아닌 교집합을 추출한다.
    4. MINUS : 차집합을 의미, 데이터 집합을 기준으로 다른 데이터 집합과 공통 항목을 제외한 결과만 추출해낸다.