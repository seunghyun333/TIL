(1) 단위 모듈 구현
1. 개념 : 소프트웨어 개발에 있어 기능을 단위 모듈별로 분할하고 추상화하여 성능을 향상시키고, 유지보수를 효과적으로 하기 위한 구현 기법
         모듈은 소프트웨어 구조를 이루며, 다른 것들과 구별될 수 있는 독립적인 기능을 갖는 단위
         인터페이스 모듈, 데이터베이스 접근 모듈 등 통합 구현에 필요한 단위 컴포넌트를 구현

         * 컴포넌트 : 특정한 기능을 수행하기 위해 독립적으로 개발되어 보급하고, 다른 부품과 조립되어 응용시스템을 구축하기 위해 사용되는 소프트웨어 프로그램 
2. 단위 모듈 구현의 원리(정분추모)
    - 정보 은닉 : 어렵거나 변경 가능성이 있는 모듈을 타 모듈로부터 은폐
    - 분할과 정복 : 복잡한 문제를 분해, 모듈 단위로 문제 해결
    - 데이터 추상화 : 각 모듈 자료 구조를 엑세스하고 수정하는 함수내에 자료 구조의 표현 내역을 은폐
    - 모듈 독립성 : 낮은 결합도와 높은 응집도를 가짐   

    * 컴포넌트와 모듈의 차이 
    : 컴포넌트는 런타임에 독립적으로 배포되고 실행되는 단위이고, 모듈은 정적인 구조. 
        하나의 서버에 5개의 클라이언트로 정보를 제공하게 될 경우, 모듈은 2개 (서버, 클라이언트) , 컴포넌트는 6개(서버 1개, 클라이언트 5개)

3. 구현 단계에서 작업 절차
    1. 코딩 계획 : 기능을 실제 수행할 수 있도록 수행 방법을 논리적으로 결정하는 단계
    2. 코딩 : 논리적으로 결정한 문제해결 방법을 특정 프로그래밍 언어를 사용하여 구현하는 단계
    3. 컴파일 : 작성한 코드를 다른 언어의 코드(주로 기계어)로 변환하는 단계
    4. 테스트 : 기능이 요구사항을 만족하는 지, 예상과 실제 결과가 어떤 차이를 보이는지 검사하고 평가하는 단계 

4. 재사용 기법
    -1. 개념 : 이미 개발되어 그 기능, 성능 및 품질을 인정 받았던 소프트웨어의 전체 또는 일부분을 다시 사용하는 기법 
    -2. 종류 : 단위 모듈의 재사용성의 개념이 확장된 재공학, 재개발 기법이 존재한다.
                재공학 : 기존 소프트웨어를 버리지 않고 기능을 개선시키거나 기능을 새로운 소프트웨어로 재활용하는 소프트웨어 재사용 기법
                        장점: 위험부담 감소, 비용 절감, 개발 기간 단축, 시스템 명세의 오류억제 
                        주요활동: 분석, 재구조, 역공학, 이식 
                재개발 : 기존 시스템을 참조하여 완전히 새로운 시스템을 개발, 기존 시스템에 새로운 기능을 추가, 기존 시스켐의 기능을 변경하는 기법 
    -3. 재사용 규모에 따른 분류 : 
            함수와 객체 : 클래스나 메서드 단위의 소스 코드를 재사용함
            컴포넌트 : 컴포넌트 자체에 대한 수정 없이 인터페이스를 통해 통신하는 방식으로 재사용함
            애플리케이션 : 공통된 기능들을 제공하는 애플리케이션을 공유하는 방식으로 재사용함
