(1) 모델링 기법
1. 모델 
개념 : 객체 ,시스템, 개념에 대한 구조나 작업을 보여주기 위한 패턴으로, 개발대상을 추상화하고 기호나 그림등으로 시각적으로 표현
특징: 소프트웨어에 대한 이해도를 향상할 수 있고, 의사소통이 향상되며, 개념 모델은 문제 도메인의 엔터티들과 관계 및 종석성을 반영한다. 

2. 모델링
개념: 실세계의 물리현상을 특정한 목적에 대응하여 이용하기 쉬운 형식으로 표현하는 기법
특징 : 유지보수 단계 뿐만아니라 분석, 설계, 구현 등 전반에 걸쳐 사용되며, 구조적 방법론에서는 DFD,DD등으로 사용하고, 객체 지향 방법론에선 UML표기헙을 사용함

(2) 분석 자동화 도구
개념 : 요구사항을 자동으로 번석하고, 요구사항 분석 명세서를 기술하도록 요구사항 분석을 위한 자동화 도구(CASE)이다. 
등장배경 : 산업측명 / 관리측면 
특징 : 표준화, 문서화를 통한 보고를 통해 품질 개선 가능, 추적 쉽고, 유지보수 비용 축소, 구조적깁버, 프로토타이핑, 자동프로그래밍, 정보 저장소, 분산 처리기술 사용
분류 : 상위CASE, 하위CASE
    상위CASE : 계획수립, 요구분석 ,기본설계 단계를 다이어그램으로 표현, 오류 검증, 일관성 검증 지원, 자료흐름도 프로토티아핑 작성지원 및 UI설계 지원
    하위CASE : 구문 중심 편집 및 정적, 동적 테스트 지원, 시스템 명세서 생성및 소스코드 생성지원 

주요기능: 그래픽 지원, 소프트웨어의 생명주기의 전 단계를 연결, 소프트웨어 개발 모형을 지원, 표준화된 개발환경구축및 문서자동화 기능, 커뮤니케이션 증대

(3) 요구사항 관리 도구
개념 : 요구사항을 기반으로 프로젝트 관리, 설계, 개발, 테스트 등을 수행할 수 있는 역할을 지원하는 도구 
필요성 : 비용 편익, 변경 추적, 영향 평가
기능 : 기본 기능(프로젝트 생성, 요구사항 작성, 요구사항 불러오기/내보내기), 핵심기능(요구사항 이력관리, 베이스라인, 추적성), 부가기능(협업환경, 외부 인터페이스, 확장성)