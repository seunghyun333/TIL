모듈화

1. 결합도 coupling
낮은게 좋음 , 모듈 간의 연관관계
<<결합도 정도>> 데스제외공내
데이터 결합도 < 스탬프 결합도 < 제어 < 외부 < 공통 < 내용 

2. 응집도 cohesion
모듈내 끈끈함. 높은게 좋음, 한 모듈 내부 
<<정도>> 기순교절시논우
기능>순차>교환>절차>시간>논리>우연

응집도는 강하게, 결합도는 약하게
복잡도, 중복성 줄이고, 일관성 유지 


C언어의 개요
1972년 벨 연구소 데니스 리치 개발
컴파일 언어. 포인터에 의한 번지연산등 다양한 연산 기능을 가진다. 
이식성이 뛰어나고 Unix 운영체제에서 사용 

main함수에서 시작 
int 2 long 4 /float 4 double 8 /char 1

기억클래스
자동변수, 레지스터변수, 정적변수, 외부변수

입출력 표준 함수
입력 : scanf()
출력 : printf()
문자입력 : getchar()
문자출력 : putchar()
문자열 입력 : gets()
문자열 출력 : puts()

변환문자
%d 10진 정수
%o 8진 정수
%x 16진 정수
%f 실수형
%e 지수형
%c 문자
%s 문자열 

이스케이프 시퀀스
** \n : new line 다음 줄 처음으로 이동
** \r : carriage return 커서를 현재 줄 처음으로 이동
\t : tab 
\b : backspace
\f :form feed 한 페이지 넘김
\0 : 널문자 출력
\' 
\"
\\
\a : 벨소리 

c언어 변수명 작성 규칙 >
영문 대소문자, 숫자, _ 혼용하여 사용가능 
첫글자는 숫자로 시작할 수 없고, 영문자나 _로 시작해야한다.
영문자는 대소문자를 구분하고, 공백을 포함할 수 없다
32개 예약어 사용불가 

10:50
포인터변수 
다른 변수의 주소값을 저장할 수 있음 . 실제 주소가 아니고 위치. 메모리의 용량때문에 사용했었음. 자료형에 상관없이 크기가 동일
읽기위해서는 *연산자사용 *P

표준 라이브러리함수
stido.h : C언어 표준 입출력 라이브러리 
종류
atio() 문자를 정수형
atof()  문자를 실수
atol() 문자를 long
itoa() 숫자를 문자열로
ceio() 자리올림
floor() 자리버림
rand() 난수발생
div 정수 나눗셈 

C언어의 연산자
우선순위 높은 순위로 
단항연산자 산술연산자 시프트연산자<< >> 관계 ==, !- 비트 &, ^ ,|(논리합 // true면 true, 두 비트 중 1개라도 1이면 1이 출력됨 ), 논리(!논리부정, &&논리곱, ||논리합) 조건(삼항 연산자 ? :) 할당 콤마 

단항연산자  
! 부정
~ 1의 보수
 ++ 1씩 증가
 -- 1씩 감소
& 주소
* 내용
sizeof 변수, 배열 저장장소의 크기를 byte단위로 구한다 

할당연산자
a+=b   : a=a=+b
a-=b   : a=a-b
a*=b   : a=a*b
a/=b   : a=a/b
a%=b   : a=a%b
a<<=b   : a=a<<b
a>>b   : a=a>>b

라이브러리 
묘듈과 패키지 총칭, 표준라이브러리 = 기본적으로 언어가 가지고 있는 

------------------------------------
Java
객체지향언어
gabage Collector : 메모리에서 사용하고 남은 나머지를 JVM 가비지 컬럭터가 알아서 정리해줌 
1바이트 = 8비트 

이스케이프 시퀀스 
접근제어자
public 모든 접근 허용
private 같은 패키지와 상속관계
default 같은 패키지에 있는 객체들만
protected 현재 객체 내에서만

출력함수
system.out.print
systme.out.println
System.out.printf() : 변환문자를 사용하여 출력 

변수면 $사용 가능 

연산자 우선순위
단항 > 산술> 비트 관계 논리 비트 조건 할당 

오버로딩 : 이름같고 매개변수 다르게 
오버라이딩 : 상속 하위 클래스에서 재정의  
--------------------
제어문 
if, if/else, if/else if/else 
삼항연산자 k = (i>j)?(i+j);(i-j);
switch~case
switch(조건값)
{ case 값1 : 
   조건값이 1일 때 실행하는 명령문 ;
   break;
  case 값2 : 
   조건값이 2일 때 실행하는 명령문 ;
   break;

   default:
    값
    break; }

while(조건식)
{ 명령문 1; 
  명령문 n;}

do(조건식)
{ 명령문 1; 
  명령문 n;}
while(조건식)
{ 명령문 1; 
  명령문 n;}
